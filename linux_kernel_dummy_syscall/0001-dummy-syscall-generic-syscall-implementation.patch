Subject: [PATCH 1/3] [dummy][syscall] generic syscall implementation

---
 Makefile                 |    2 +-
 dummy/Makefile           |    5 ++++
 dummy/sys_dummy.c        |   52 ++++++++++++++++++++++++++++++++++++++++++++++
 include/linux/syscalls.h |    2 +
 4 files changed, 60 insertions(+), 1 deletions(-)
 create mode 100644 dummy/Makefile
 create mode 100644 dummy/sys_dummy.c

diff --git a/Makefile b/Makefile
index d49d96c..c835add 100644
--- a/Makefile
+++ b/Makefile
@@ -650,7 +650,7 @@ export mod_strip_cmd
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ dummy/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/dummy/Makefile b/dummy/Makefile
new file mode 100644
index 0000000..48b9f58
--- /dev/null
+++ b/dummy/Makefile
@@ -0,0 +1,5 @@
+#
+# Makefile for the dummy staff
+#
+
+obj-y := sys_dummy.o
diff --git a/dummy/sys_dummy.c b/dummy/sys_dummy.c
new file mode 100644
index 0000000..e9bb7e5
--- /dev/null
+++ b/dummy/sys_dummy.c
@@ -0,0 +1,52 @@
+/*
+ *  dummy/dummy.c
+ *
+ *  Copyright (C) 2010 Dmytro Milinevskyy
+ */
+
+#include <linux/slab.h>
+#include <linux/syscalls.h>
+#include <linux/linkage.h>
+
+#include <asm/uaccess.h>
+
+/* asmlinkage long sys_dummy(const char __user *data, int len) */
+SYSCALL_DEFINE2(dummy, const char __user *, data, int, len)
+{
+	u32 *data_krn;
+	int len_kern = ALIGN(len, sizeof(u32));
+	int words, i;
+
+	if (unlikely(len > 128)) {
+		printk("Data is too big, should be less than 128 bytes\n");
+		return -EINVAL;
+	}
+
+	if (!data || !len) {
+		printk("No data? Are you trying to trick me?\n");
+		return -EINVAL;
+	}
+
+	data_krn = kzalloc(len_kern, GFP_KERNEL);
+	if (!data_krn) {
+		printk("Unable to allocate %d bytes\n", len_kern);
+		return -ENOMEM;
+	}
+
+	if (copy_from_user(data_krn, data, len)) {
+		printk("Unable to copy userspace data\n");
+	}
+
+	printk("sys_dummy: %d bytes\n", len);
+	words = len_kern/4;
+	for (i=0; i<words; ++i) {
+		printk("0x%08X", *(data_krn + i));
+
+		if (i && !(i%4))
+			printk("\n");
+		else
+			printk(" ");
+	}
+
+	return 0;
+}
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 7f614ce..616a9cd 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -824,4 +824,6 @@ asmlinkage long sys_mmap_pgoff(unsigned long addr, unsigned long len,
 			unsigned long fd, unsigned long pgoff);
 asmlinkage long sys_old_mmap(struct mmap_arg_struct __user *arg);
 
+asmlinkage long sys_dummy(const char __user *data, int len);
+
 #endif
-- 
1.7.1

